{"version":3,"sources":["types/page-type/index.ts","component/page-menu/page-menu.tsx","containers/home-page/home-page.tsx","containers/test-page/test-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","title","path","Test","AllValues","PageMenu","props","currentPage","onPageChange","Tabs","value","onChange","event","newValue","indicatorColor","textColor","centered","PageType","map","page","Tab","label","key","component","Link","to","HomePage","TestPage","App","location","useLocation","useState","meta","filter","startsWith","length","pathname","setCurrentPage","className","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAKaA,G,MAAiB,CAC5BC,MAAO,OACPC,KAAM,MAGKC,EAAiB,CAC5BF,MAAO,OACPC,KAAM,SAGKE,EAAY,CAACJ,EAAMG,GCHhC,IA4BeE,EA5BE,SAACC,GAA0B,IAClCC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,aAErB,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,MAAOH,EACPI,SAAU,SAACC,EAAOC,GAChBL,EAAaK,IAEfC,eAAe,UACfC,UAAU,UACVC,UAAQ,GAEPC,EAAmBC,KAAI,SAACC,GAAD,OACtB,kBAACC,EAAA,EAAD,CACEC,MAAOF,EAAKlB,MACZS,MAAOS,EACPG,IAAKH,EAAKjB,KACVqB,UAAWC,IACXC,GAAIN,EAAKjB,a,OCtBNwB,G,YAJE,SAACpB,GAChB,OAAO,2CCGMqB,G,MAJE,SAACrB,GAChB,OAAO,2CC6BMsB,MA3Bf,WACE,IAAMC,EAAWC,cADJ,EAEyBC,mBJMjC,SAAkB7B,GACvB,IAAM8B,EAAO5B,EAAU6B,QACrB,SAACvB,GAAD,OAAWA,EAAMR,OAASA,IAAf,OAAuBA,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAMgC,WAAWxB,EAAMR,KAAO,SAElE,OAAoB,IAAhB8B,EAAKG,OAAqBnC,EACvBgC,EAAK,GIVVf,CAAkBY,EAASO,WAHhB,mBAEN7B,EAFM,KAEO8B,EAFP,KAMb,OACE,yBAAKC,UAAU,OAAf,qBAEE,6BAFF,6BAIE,6BAJF,mCAME,kBAAC,EAAD,CAAU/B,YAAaA,EAAaC,aAAc6B,IAClD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACrC,KAAMe,EAAcf,MAC/B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAMe,EAAcf,MACzB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUuB,GAAIR,EAAcf,UClBhBsC,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a7eaff4.chunk.js","sourcesContent":["export type PageMeta = {\n  title: string;\n  path: string;\n};\n\nexport const Home: PageMeta = {\n  title: \"Home\",\n  path: \"/\",\n};\n\nexport const Test: PageMeta = {\n  title: \"Test\",\n  path: \"/test\",\n};\n\nexport const AllValues = [Home, Test];\n\nexport function fromPath(path?: string): PageMeta {\n  const meta = AllValues.filter(\n    (value) => value.path === path || path?.startsWith(value.path + \"/\")\n  );\n  if (meta.length === 0) return Home;\n  return meta[0];\n}\n\nexport function fromTitle(title?: string): PageMeta {\n  const meta = AllValues.filter((value) => value.title === title);\n  if (meta.length === 0) return Home;\n  return meta[0];\n}\n","import React from \"react\";\nimport { Tabs, Tab } from \"@material-ui/core\";\n\nimport \"./page-menu.css\";\nimport * as PageType from \"../../types/page-type\";\nimport { Link } from \"react-router-dom\";\n\ntype PageMenuProps = {\n  currentPage: PageType.PageMeta;\n  onPageChange: (page: PageType.PageMeta) => void;\n};\n\nconst PageMenu = (props: PageMenuProps) => {\n  const { currentPage, onPageChange } = props;\n\n  return (\n    <div>\n      <Tabs\n        value={currentPage}\n        onChange={(event, newValue) => {\n          onPageChange(newValue);\n        }}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        {PageType.AllValues.map((page) => (\n          <Tab\n            label={page.title}\n            value={page}\n            key={page.path}\n            component={Link}\n            to={page.path}\n          />\n        ))}\n      </Tabs>\n    </div>\n  );\n};\n\nexport default PageMenu;\n","import React from \"react\";\n\nimport \"./home-page.css\";\n\ntype HomePageProps = {};\n\nconst HomePage = (props: HomePageProps) => {\n  return <div>HomePage</div>;\n};\n\nexport default HomePage;\n","import React from \"react\";\n\nimport \"./test-page.css\";\n\ntype TestPageProps = {};\n\nconst TestPage = (props: TestPageProps) => {\n  return <div>TestPage</div>;\n};\n\nexport default TestPage;\n","import React, { useState } from \"react\";\nimport PageMenu from \"./component/page-menu\";\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport * as PageType from \"./types/page-type\";\nimport HomePage from \"./containers/home-page\";\nimport TestPage from \"./containers/test-page\";\n\nfunction App() {\n  const location = useLocation();\n  const [currentPage, setCurrentPage] = useState(\n    PageType.fromPath(location.pathname)\n  );\n\n  return (\n    <div className=\"App\">\n      Tsznok Wong's Web.\n      <br />\n      Please wait for updates...\n      <br />\n      He is working on it very soon...\n      <PageMenu currentPage={currentPage} onPageChange={setCurrentPage} />\n      <Switch>\n        <Route exact path={PageType.Home.path}>\n          <HomePage />\n        </Route>\n        <Route path={PageType.Test.path}>\n          <TestPage />\n        </Route>\n        <Redirect to={PageType.Home.path} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}