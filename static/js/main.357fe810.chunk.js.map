{"version":3,"sources":["containers/home-page/home-page.tsx","containers/test-page/test-page.tsx","types/page-type/page-type.tsx","components/page-menu/page-menu.tsx","containers/app/app.tsx","serviceWorker.ts","assets/theme/index.ts","index.tsx"],"names":["HomePage","props","TestPage","Home","title","path","exactPath","element","Study","Job","Contact","AllValues","PageMenu","currentPage","onPageChange","pages","classes","useStyles","Tabs","value","onChange","event","newValue","textColor","variant","TabIndicatorProps","style","height","map","page","Tab","selected","className","tab","disableRipple","label","component","Link","to","key","makeStyles","theme","minWidth","color","blueGrey","fontWeight","typography","fontWeightRegular","palette","primary","light","opacity","main","fontWeightMedium","PageType","App","location","useLocation","useState","meta","filter","startsWith","length","pathname","setCurrentPage","useEffect","document","root","Grid","headerRow","container","Box","titleBox","paddingX","Typography","borderLeft","borderColor","subtitle","exact","textAlign","padding","display","flexDirection","justifyContent","alignItems","Boolean","window","hostname","match","createMuiTheme","secondary","fontFamily","join","h3","fontSize","h4","h5","spacing","responsiveFontSizes","ReactDOM","render","StrictMode","ThemeProvider","Theme","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.357fe810.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./home-page.css\";\n\ntype HomePageProps = {};\n\nconst HomePage = (props: HomePageProps) => {\n  return <div>HomePage</div>;\n};\n\nexport default HomePage;\n","import React from \"react\";\n\nimport \"./test-page.css\";\n\ntype TestPageProps = {};\n\nconst TestPage = (props: TestPageProps) => {\n  return <div>TestPage</div>;\n};\n\nexport default TestPage;\n","import React from \"react\";\nimport HomePage from \"../../containers/home-page\";\nimport TestPage from \"../../containers/test-page\";\n\nexport type PageMeta = {\n  title: string;\n  path: string;\n  exactPath: boolean;\n  element: JSX.Element;\n};\n\nexport const Home: PageMeta = {\n  title: \"Home\",\n  path: \"/\",\n  exactPath: true,\n  element: <HomePage />,\n};\n\nexport const Study: PageMeta = {\n  title: \"Study\",\n  path: \"/study\",\n  exactPath: false,\n  element: <TestPage />,\n};\n\nexport const Job: PageMeta = {\n  title: \"Job\",\n  path: \"/job\",\n  exactPath: false,\n  element: <TestPage />,\n};\n\nexport const Contact: PageMeta = {\n  title: \"Contact\",\n  path: \"/contact\",\n  exactPath: false,\n  element: <TestPage />,\n};\n\nexport const Test: PageMeta = {\n  title: \"Test\",\n  path: \"/test\",\n  exactPath: false,\n  element: <TestPage />,\n};\n\nexport const AllValues = [Home, Study, Job, Contact, Test];\n\nexport function fromPath(path?: string): PageMeta {\n  const meta = AllValues.filter(\n    (value) => value.path === path || path?.startsWith(value.path + \"/\")\n  );\n  if (meta.length === 0) return Home;\n  return meta[0];\n}\n\nexport function fromTitle(title?: string): PageMeta {\n  const meta = AllValues.filter((value) => value.title === title);\n  if (meta.length === 0) return Home;\n  return meta[0];\n}\n","import React from \"react\";\nimport { Tabs, Tab } from \"@material-ui/core\";\nimport { Theme, makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./page-menu.css\";\nimport * as PageType from \"../../types/page-type\";\nimport { Link } from \"react-router-dom\";\nimport { blueGrey } from \"@material-ui/core/colors\";\n\ntype PageMenuProps = {\n  pages: PageType.PageMeta[];\n  currentPage: PageType.PageMeta;\n  onPageChange: (page: PageType.PageMeta) => void;\n};\n\nconst PageMenu = (props: PageMenuProps) => {\n  const { currentPage, onPageChange, pages } = props;\n  const classes = useStyles();\n  return (\n    <Tabs\n      value={currentPage}\n      onChange={(event, newValue) => {\n        onPageChange(newValue);\n      }}\n      textColor=\"primary\"\n      variant=\"fullWidth\"\n      TabIndicatorProps={{\n        style: {\n          height: \"0\",\n        },\n      }}\n    >\n      {pages.map((page) => (\n        <Tab\n          selected={page === currentPage}\n          className={classes.tab}\n          disableRipple\n          label={page.title}\n          value={page}\n          component={Link}\n          to={page.path}\n          key={page.path}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nexport default PageMenu;\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  tab: {\n    minWidth: 80,\n    color: blueGrey[200],\n    fontWeight: theme.typography.fontWeightRegular,\n    \"&:hover\": {\n      color: theme.palette.primary.light,\n      opacity: 1,\n    },\n    \"&$selected\": {\n      color: theme.palette.primary.main,\n      fontWeight: theme.typography.fontWeightMedium,\n    },\n    \"&:focus\": {\n      color: theme.palette.primary.main,\n    },\n  },\n}));\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\nimport { Grid, makeStyles, Theme, Box, Typography } from \"@material-ui/core\";\n\nimport \"./app.css\";\nimport * as PageType from \"../../types/page-type\";\nimport PageMenu from \"../../components/page-menu\";\nimport { blueGrey } from \"@material-ui/core/colors\";\n\nconst pages: PageType.PageMeta[] = [\n  PageType.Home,\n  PageType.Study,\n  PageType.Job,\n  PageType.Contact,\n];\n\nconst title = \"Joshua\";\n\nconst App = () => {\n  const location = useLocation();\n  const [currentPage, setCurrentPage] = useState(\n    PageType.fromPath(location.pathname)\n  );\n  const classes = useStyles();\n  useEffect(() => {\n    if (currentPage !== PageType.Home) {\n      document.title = `${title} | ${currentPage.title}`;\n    } else {\n      document.title = title;\n    }\n  }, [currentPage]);\n  return (\n    <div className={classes.root}>\n      <Grid className={classes.headerRow} container>\n        <Box className={classes.titleBox}>\n          <Box paddingX={1}>\n            <Typography variant=\"h3\">{title}</Typography>\n          </Box>\n\n          {currentPage !== PageType.Home && (\n            <Box borderLeft={1} paddingX={1} borderColor={blueGrey[200]}>\n              <Typography className={classes.subtitle} variant=\"h5\">\n                {currentPage.title}\n              </Typography>\n            </Box>\n          )}\n        </Box>\n\n        <PageMenu\n          pages={pages}\n          currentPage={currentPage}\n          onPageChange={setCurrentPage}\n        />\n      </Grid>\n      <Switch>\n        {pages.map((page) => (\n          <Route exact={page.exactPath} path={page.path} key={page.path}>\n            {page.element}\n          </Route>\n        ))}\n        <Redirect to={PageType.Home.path} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    textAlign: \"center\",\n  },\n  headerRow: {\n    height: \"4rem\",\n    padding: \"0% 1rem\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  titleBox: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  title: {},\n  subtitle: {\n    color: theme.palette.primary.main,\n  },\n}));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#413c69\",\n    },\n    secondary: {\n      main: \"#f6d198\",\n    },\n  },\n  typography: {\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    h3: {\n      fontSize: \"2rem\",\n      fontWeight: 400,\n    },\n    h4: {\n      fontSize: \"1.8rem\",\n      fontWeight: 300,\n    },\n    h5: {\n      fontSize: \"1.6rem\",\n      fontWeight: 200,\n    },\n  },\n  spacing: 8,\n});\n\ntheme = responsiveFontSizes(theme);\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/core\";\n\nimport \"./index.css\";\nimport App from \"./containers/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Theme from \"./assets/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={Theme}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}